#!/usr/bin/env python3
"""
Script d'installation automatique de PyTorch avec support GPU
D√©tecte automatiquement le type de machine et installe la bonne version
"""

import subprocess
import sys
import platform
import os

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} r√©ussi")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} √©chou√©: {e}")
        print(f"   Erreur: {e.stderr}")
        return False

def detect_gpu_type():
    """D√©tecte le type de GPU disponible"""
    print("üîç D√©tection du type de GPU...")
    
    # V√©rifier si on est sur Mac
    if platform.system() == "Darwin":
        # V√©rifier si c'est Apple Silicon
        try:
            result = subprocess.run(["uname", "-m"], capture_output=True, text=True)
            if "arm" in result.stdout.lower():
                print("üçé Apple Silicon d√©tect√© (M1/M2/M3)")
                return "mps"
        except:
            pass
        print("üçé Mac Intel d√©tect√©")
        return "cpu"
    
    # V√©rifier CUDA sur Windows/Linux
    try:
        result = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if result.returncode == 0:
            print("üéÆ NVIDIA GPU d√©tect√©")
            return "cuda"
    except FileNotFoundError:
        pass
    
    print("üíª Aucun GPU d√©tect√©")
    return "cpu"

def install_pytorch_gpu(gpu_type):
    """Installe PyTorch avec support GPU selon le type d√©tect√©"""
    
    if gpu_type == "cuda":
        print("üéÆ Installation de PyTorch avec support CUDA...")
        commands = [
            "pip uninstall torch torchvision torchaudio -y",
            "pip install torch==2.4.0+cu118 torchvision==0.19.0+cu118 torchaudio==2.4.0+cu118 --index-url https://download.pytorch.org/whl/cu118"
        ]
        
    elif gpu_type == "mps":
        print("üçé Installation de PyTorch avec support Metal (MPS)...")
        commands = [
            "pip uninstall torch torchvision torchaudio -y",
            "pip install torch torchvision torchaudio"
        ]
        
    else:  # cpu
        print("üíª Installation de PyTorch CPU...")
        commands = [
            "pip uninstall torch torchvision torchaudio -y",
            "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu"
        ]
    
    # Ex√©cuter les commandes
    for command in commands:
        if not run_command(command, f"Ex√©cution: {command}"):
            return False
    
    return True

def verify_installation():
    """V√©rifie que l'installation GPU fonctionne"""
    print("üîç V√©rification de l'installation...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch version: {torch.__version__}")
        
        if torch.cuda.is_available():
            print(f"üéÆ CUDA disponible: {torch.cuda.get_device_name(0)}")
            print(f"   M√©moire: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():
            print("üçé Metal Performance Shaders (MPS) disponible")
        else:
            print("üíª Mode CPU uniquement")
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import PyTorch: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Installation automatique de PyTorch avec support GPU")
    print("=" * 60)
    
    # D√©tecter le type de GPU
    gpu_type = detect_gpu_type()
    
    # Installer PyTorch
    if install_pytorch_gpu(gpu_type):
        print("\n‚úÖ Installation termin√©e avec succ√®s!")
        
        # V√©rifier l'installation
        if verify_installation():
            print("\nüéâ PyTorch est pr√™t √† utiliser le GPU!")
        else:
            print("\n‚ö†Ô∏è Installation termin√©e mais v√©rification √©chou√©e")
    else:
        print("\n‚ùå Installation √©chou√©e")
        sys.exit(1)

if __name__ == "__main__":
    main()
