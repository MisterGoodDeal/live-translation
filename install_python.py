#!/usr/bin/env python3
"""
Script d'installation des d√©pendances Python
"""

import subprocess
import sys
import os
import platform

def run_command(cmd, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e.stderr}")
        return False

def check_python():
    """V√©rifie la version de Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    print("‚úÖ Version Python compatible")
    return True

def create_virtual_env():
    """Cr√©e un environnement virtuel"""
    if os.path.exists(".venv"):
        print("üìÅ Environnement virtuel existant trouv√©")
        return True
    
    return run_command("python -m venv .venv", "Cr√©ation de l'environnement virtuel")

def activate_and_install():
    """Active l'environnement virtuel et installe les d√©pendances"""
    if platform.system() == "Windows":
        activate_cmd = ".venv\\Scripts\\activate"
        pip_cmd = ".venv\\Scripts\\pip"
    else:
        activate_cmd = "source .venv/bin/activate"
        pip_cmd = ".venv/bin/pip"
    
    # Mettre √† jour pip
    if not run_command(f"{pip_cmd} install --upgrade pip", "Mise √† jour de pip"):
        return False
    
    # Installer les d√©pendances de base
    if not run_command(f"{pip_cmd} install -r requirements.txt", "Installation des d√©pendances Python"):
        return False
    
    return True

def install_gpu_support():
    """Installe le support GPU si disponible"""
    print("üéÆ V√©rification du support GPU...")
    
    try:
        import torch
        if torch.cuda.is_available():
            print("‚úÖ CUDA d√©tect√© - Support GPU d√©j√† install√©")
        elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():
            print("‚úÖ MPS d√©tect√© (Mac) - Support GPU d√©j√† install√©")
        else:
            print("üíª Aucun GPU d√©tect√© - Utilisation CPU uniquement")
    except ImportError:
        print("‚ö†Ô∏è PyTorch non install√© - Installation du support GPU...")
        
        if platform.system() == "Windows":
            # Windows - CUDA
            run_command(".venv\\Scripts\\pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118", "Installation PyTorch CUDA")
        else:
            # Mac/Linux - MPS/CPU
            run_command(".venv/bin/pip install torch torchvision torchaudio", "Installation PyTorch")

def main():
    """Fonction principale"""
    print("üöÄ Installation des d√©pendances Python")
    print("=" * 40)
    
    # V√©rifier Python
    if not check_python():
        return False
    
    # Cr√©er l'environnement virtuel
    if not create_virtual_env():
        return False
    
    # Installer les d√©pendances
    if not activate_and_install():
        return False
    
    # Installer le support GPU
    install_gpu_support()
    
    print("\nüéâ Installation termin√©e avec succ√®s!")
    print("üìã Prochaines √©tapes:")
    print("   1. python build_nextjs.py")
    print("   2. python start_server.py")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
